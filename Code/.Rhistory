item_ids <- unique(fit$item_id)
# Create a dataframe for the next 28 days for each item_id
future_data <- expand.grid(
date = seq.Date(from = as.Date("2016-08-19"), by = "day", length.out = 28),
item_id = item_ids
)
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
fc<-forecast(fit, new_data =  merged_future)
fc |>
autoplot(merged_full_selected,level = NULL) +
labs(x = "Date", y = "Demand (MWh)")
View(fc)
View(fc[[4]][[1]])
View(fc[[4]][[33]])
predicted_values <- fc$yhat
glance(fc)
fc
glance(fit)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 10, type = "multiplicative") +
season(period = "year", order = 3), type = "multiplicative"))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Get the unique item_ids from fit
item_ids <- unique(fit$item_id)
# Create a dataframe for the next 28 days for each item_id
future_data <- expand.grid(
date = seq.Date(from = as.Date("2016-08-19"), by = "day", length.out = 28),
item_id = item_ids
)
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 10, type = "multiplicative") +
season(period = "year", order = 3, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Get the unique item_ids from fit
item_ids <- unique(fit$item_id)
# Create a dataframe for the next 28 days for each item_id
future_data <- expand.grid(
date = seq.Date(from = as.Date("2016-08-19"), by = "day", length.out = 28),
item_id = item_ids
)
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
# Assuming `fc` is your fable object
autoplot(fc$forecast, data = fbl_ts) +
labs(title = "Point Forecasts")
fc |>
autoplot(merged_full_selected,level=NULL|> tail(10 * 48)) +
labs(x = "Date", y = "Demand (MWh)")
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Get the unique item_ids from fit
item_ids <- unique(fit$item_id)
# Create a dataframe for the next 28 days for each item_id
future_data <- expand.grid(
date = seq.Date(from = as.Date("2016-08-19"), by = "day", length.out = 28),
item_id = item_ids
)
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
fc |>
autoplot(merged_full_selected,level=NULL|> tail(10 * 48)) +
labs(x = "Date", y = "Demand (MWh)")
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Demand (MWh)")
fc |>
autoplot(merged_full_selected,level=NULL|> tail(10 * 48)) +
labs(x = "Date", y = "Demand (MWh)")
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Demand (MWh)")
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Sales")
View(calendar)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
#
# # Generate the 'snap' variable
# merged_future <- new_data(merged_full_selected,28)|>
#   mutate(
#     snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
#     )  # Set 'snap' to 1 on snap days, 0 otherwise,
#
# last_sell_prices <- merged_data %>%
#   group_by(item_id) %>%
#   summarise(last_sell_price = last(sell_price))
#
# # Merge the last known 'sell_price' into merged_future
# merged_future <- merged_future |>
#   left_join(last_sell_prices, by = "item_id") |>
#   ungroup()  # Remove grouping
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(index(merged_full_selected))
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- tail(index(merged_full_selected), 1)
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(merged_full_selected$date)
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
#
# # Generate the 'snap' variable
# merged_future <- new_data(merged_full_selected,28)|>
#   mutate(
#     snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
#     )  # Set 'snap' to 1 on snap days, 0 otherwise,
#
# last_sell_prices <- merged_data %>%
#   group_by(item_id) %>%
#   summarise(last_sell_price = last(sell_price))
#
# # Merge the last known 'sell_price' into merged_future
# merged_future <- merged_future |>
#   left_join(last_sell_prices, by = "item_id") |>
#   ungroup()  # Remove grouping
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(merged_full_selected$date)
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
# Merge the last known 'sell_price' into merged_future
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
#
# # Generate the 'snap' variable
# merged_future <- new_data(merged_full_selected,28)|>
#   mutate(
#     snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
#     )  # Set 'snap' to 1 on snap days, 0 otherwise,
#
# last_sell_prices <- merged_data %>%
#   group_by(item_id) %>%
#   summarise(last_sell_price = last(sell_price))
#
# # Merge the last known 'sell_price' into merged_future
# merged_future <- merged_future |>
#   left_join(last_sell_prices, by = "item_id") |>
#   ungroup()  # Remove grouping
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(merged_full_selected$date)
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
# Merge the last known 'sell_price' into merged_future
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
merged_future <- merged_future |>
left_join(last_sell_prices, by = item_id) |>
ungroup()  # Remove grouping
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
#
# # Generate the 'snap' variable
# merged_future <- new_data(merged_full_selected,28)|>
#   mutate(
#     snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
#     )  # Set 'snap' to 1 on snap days, 0 otherwise,
#
# last_sell_prices <- merged_data %>%
#   group_by(item_id) %>%
#   summarise(last_sell_price = last(sell_price))
#
# # Merge the last known 'sell_price' into merged_future
# merged_future <- merged_future |>
#   left_join(last_sell_prices, by = "item_id") |>
#   ungroup()  # Remove grouping
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(merged_full_selected$date)
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
# Merge the last known 'sell_price' into merged_future
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
View(last_sell_prices)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
#
# # Generate the 'snap' variable
# merged_future <- new_data(merged_full_selected,28)|>
#   mutate(
#     snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
#     )  # Set 'snap' to 1 on snap days, 0 otherwise,
#
# last_sell_prices <- merged_data %>%
#   group_by(item_id) %>%
#   summarise(last_sell_price = last(sell_price))
#
# # Merge the last known 'sell_price' into merged_future
# merged_future <- merged_future |>
#   left_join(last_sell_prices, by = "item_id") |>
#   ungroup()  # Remove grouping
# Assuming 'calendar' is your calendar data with 'snap_TX'
# Filter for the last 28 days after the last date in merged_full_selected
last_date <- max(merged_full_selected$date)
merged_future <- calendar %>%
filter(date > last_date) %>%
head(28)
# Merge the last known 'sell_price' into merged_future
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))|>filter(item_id %in% random_items)
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
result <- merge(calendar, merged_future, by = "date", all.x = TRUE)
View(result)
result <- merged_future |> left_join(calendar %>% select(event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
result <- merged_future |> right_join(calendar %>% select(event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
result <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
View(result)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
View(result)
fc
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1+event_type_1+event_name_2+event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the future dataframe
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Sales")
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1+event_type_1+event_name_2+event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
library(fable.prophet)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- merged_data %>%
select(date, event_name_1, event_type_1, event_name_2, event_type_2, snap_TX) %>%
distinct() %>%
dummy_cols()  # Assuming you have the 'dummy' package installed
fc[[4]][[33]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]]
install.packages("fastDummies")
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
# Fit the model
fit <- merged_full_selected |>
model(prophet = prophet(sales ~ snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")|>as_tsibble(key = item_id, index = date)
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
gc()
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
gc()
# Fit the model
fit <- merged_full_selected |>
model(prophet = prophet(sales ~ snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
