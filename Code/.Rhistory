# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('patchwork') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('vroom') # input/output
library('skimr') # overview
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('purrr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('fuzzyjoin') # data wrangling
# specific visualisation
library('alluvial') # visualisation
library('ggrepel') # visualisation
library('ggforce') # visualisation
library('ggridges') # visualisation
library('gganimate') # animations
library('GGally') # visualisation
library('ggthemes') # visualisation
library('wesanderson') # visualisation
library('kableExtra') # display
# Date + forecast
library('lubridate') # date and time
library('forecast') # time series analysis
#library('prophet') # time series analysis
library('timetk') # time series analysis
# Interactivity
library('crosstalk')
library('plotly')
# parallel
library('foreach')
library('doParallel')
#---------------------LOAD DATASETS---------------------
path = 'C:/Users/dimcp/Documents/AFCS-Project/Data/'
sell_prices <- vroom(str_c(path,"sell_prices_afcs2023.csv"), delim = ",", col_types = cols())
sales_train_validation <- vroom(str_c(path,"sales_train_validation_afcs2023.csv"), delim = ",", col_types = cols())
calendar <- vroom(str_c(path,"calendar_afcs2023.csv"), delim = ",", col_types = cols())
#sales_test_validation <- vroom(str_c(path,"sales_test_validation_afcs2022.csv"), delim = ",", col_types = cols())
#samples_submission <- vroom(str_c(path,"sample_submission_afcs2023.csv"), delim = ",", col_types = cols())
sales_prices[, dept_id := str_extract(item_id, "^[a-zA-Z]*_[0-9]")]
sale_prices[, dept_id := str_extract(item_id, "^[a-zA-Z]*_[0-9]")]
sell_prices[, dept_id := str_extract(item_id, "^[a-zA-Z]*_[0-9]")]
dt_tmp <- prices[, .(max_sell_price = max(sell_price)), .( item_id)]
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), .( item_id)]
library(tidyverse)
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(psych))
install.packages("psych")
library(tidyverse)
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(psych))
#suppressPackageStartupMessages(library(DT))
#suppressPackageStartupMessages(library(formattable))
#ggplot
theme_set(theme_bw() +
theme(plot.title = element_text(size = 17, face = "bold"),
plot.subtitle = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
legend.text =element_text(size = 15),
legend.title =element_text(size = 15)
)
)
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), .( item_id)]
library(tidyverse)
library(data.table)
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(psych))
#suppressPackageStartupMessages(library(DT))
#suppressPackageStartupMessages(library(formattable))
#ggplot
theme_set(theme_bw() +
theme(plot.title = element_text(size = 17, face = "bold"),
plot.subtitle = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
legend.text =element_text(size = 15),
legend.title =element_text(size = 15)
)
)
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), .( item_id)]
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), .( item_id)]
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), by = .(item_id)]
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library(tidyverse)
library(data.table)
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(psych))
#suppressPackageStartupMessages(library(DT))
#suppressPackageStartupMessages(library(formattable))
#ggplot
theme_set(theme_bw() +
theme(plot.title = element_text(size = 17, face = "bold"),
plot.subtitle = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
legend.text =element_text(size = 15),
legend.title =element_text(size = 15)
)
)
dt_tmp <- sell_prices[, .(max_sell_price = max(sell_price)), by = .(item_id)]
