ungroup()  # Remove grouping
result <- merge(calendar, merged_future, by = "date", all.x = TRUE)
View(result)
result <- merged_future |> left_join(calendar %>% select(event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
result <- merged_future |> right_join(calendar %>% select(event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
result <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
View(result)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)|>
mutate(
snap_TX = ifelse(day(date) %in% c(1, 3, 5, 6, 7, 9, 11, 12, 13, 15), 1, 0)
)  # Set 'snap' to 1 on snap days, 0 otherwise,
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
View(result)
fc
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the 'snap' variable
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
library(fable.prophet)
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1+event_type_1+event_name_2+event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
#model(arima = ARIMA(sales~sell_price,stepwise=FALSE))
# Generate the future dataframe
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(last_sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
merged_future <- merged_future |> left_join(calendar %>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX), by = "date")
glance(fit)
fc<-forecast(fit, new_data =  merged_future)
fc
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Sales")
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1+event_type_1+event_name_2+event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
fit <- merged_full_selected |>
model(prophet = prophet(sales  ~  snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
library(fable.prophet)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- merged_data %>%
select(date, event_name_1, event_type_1, event_name_2, event_type_2, snap_TX) %>%
distinct() %>%
dummy_cols()  # Assuming you have the 'dummy' package installed
fc[[4]][[33]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]][["5"]]
install.packages("fastDummies")
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
# Fit the model
fit <- merged_full_selected |>
model(prophet = prophet(sales ~ snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")|>as_tsibble(key = item_id, index = date)
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
library(fable.prophet)
library(fastDummies)
# Assuming merged_data is your main data frame
merged_full_selected <- merged_data %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(merged_data, select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2", "snap_TX"))
gc()
# Merge dummy variables with the main data
merged_full_selected <- merge(merged_full_selected, calendar_dummies, by = "date")
gc()
# Fit the model
fit <- merged_full_selected |>
model(prophet = prophet(sales ~ snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
season(period = "week", order = 3, type = "multiplicative") +
season(period = "year", order = 10, type = "multiplicative")))
library(fable.prophet)
library(fastDummies)
#50 random items, more clear info
set.seed(123)  # Set seed for reproducibility
random_items <- sample(unique(merged_data$item_id), 50)
library('corrplot') # visualisation
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('patchwork') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('vroom') # input/output
library('skimr') # overview
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('purrr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('fuzzyjoin') # data wrangling
library(tidyverse)
# specific visualisation
library('alluvial') # visualisation
library('ggrepel') # visualisation
library('ggforce') # visualisation
library('ggridges') # visualisation
library('gganimate') # animations
library('GGally') # visualisation
library('ggthemes') # visualisation
library('wesanderson') # visualisation
library('kableExtra') # display
# Date + forecast
library('lubridate') # date and time
library('forecast') # time series analysis
#library('prophet') # time series analysis
library('timetk') # time series analysis
# Interactivity
library('crosstalk')
library('plotly')
# parallel
library('foreach')
library('doParallel')
library(fpp3)
library(latex2exp)
library(rmarkdown)
library(skimr)
library(dplyr)
library(tsibble)
library(forecast)
library(stats)
library(ggplot2)
library(fable)
library(fabletools)
library(cowplot)
#---------------------LOAD DATASETS---------------------
path = 'C:/Users/dimcp/Documents/AFCS-Project/Data/'
sell_prices <- vroom(str_c(path,"sell_prices_afcs2023.csv"), delim = ",", col_types = cols())
sales_train_validation <- vroom(str_c(path,"sales_train_validation_afcs2023.csv"), delim = ",", col_types = cols())
calendar <- vroom(str_c(path,"calendar_afcs2023.csv"), delim = ",", col_types = cols())
sales_test_validation <- vroom(str_c(path,"sales_test_validation_afcs2022.csv"), delim = ",", col_types = cols())
#samples_submission <- vroom(str_c(path,"sample_submission_afcs2023.csv"), delim = ",", col_types = cols())
#---------------------LOAD DATASETS---------------------
path = 'C:/Users/dimcp/Documents/AFCS-Project/Data/'
sell_prices <- vroom(str_c(path,"sell_prices_afcs2023.csv"), delim = ",", col_types = cols())
sales_train_validation <- vroom(str_c(path,"sales_train_validation_afcs2023.csv"), delim = ",", col_types = cols())
calendar <- vroom(str_c(path,"calendar_afcs2023.csv"), delim = ",", col_types = cols())
sales_test_validation <- vroom(str_c(path,"sales_test_validation_afcs2022.csv"), delim = ",", col_types = cols())
#samples_submission <- vroom(str_c(path,"sample_submission_afcs2023.csv"), delim = ",", col_types = cols())
extract_ts <- function(df){
min_date <- as.Date("2011-01-29") #lowest data, corresponds to d_1
df %>%
select(id, starts_with("d_")) %>%   #take the id of the item and the daily sales columns
pivot_longer(starts_with("d_"), names_to = "dates", values_to = "sales") %>%     #reshape
mutate(dates = as.integer(str_remove(dates, "d_"))) %>%
mutate(dates = min_date + dates - 1) %>%         #turn day numbers into dates
mutate(id = str_remove(id, "_validation"))       #remove end of item id
}
# summary(sales_train_validation)
#change column names from d_1 to dates
#also fix item_id
sales_train_validation_long <- sales_train_validation %>%
pivot_longer(cols = -id, names_to = "date", values_to = "sales") %>%
mutate(date = as.Date("2011-01-29") + as.integer(str_remove(date, "d_")) - 1) %>%
rename(item_id = id) %>%
mutate(item_id = str_remove(item_id, "_TX_3_validation"))
summary(sales_train_validation_long)
calendar <- calendar %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"))
result <- merge(calendar, sales_train_validation_long, by = "date", all.x = TRUE)
result <- result %>%
arrange(date, item_id)
merged_data <- result %>%
left_join(sell_prices %>% select(wm_yr_wk, item_id, sell_price), by = c("wm_yr_wk", "item_id"))|>
filter(!is.na(sales),!is.infinite(sales))
summary(merged_data)
summary(merged_data)
library(cowplot)
library(fpp3)
library(latex2exp)
library(rmarkdown)
library(skimr)
library(dplyr)
library(tsibble)
library(forecast)
library(stats)
library(ggplot2)
library(fable)
library(fabletools)
library(cowplot)
library(fastDummies)
#50 random items - forecasting with prophet
set.seed(123)  # Set seed for reproducibility
random_items <- sample(unique(merged_data$item_id), 50)
# Convert categorical variables to dummy variables
merged_full_selected <- fastDummies::dummy_cols(merged_data %>%
mutate(across(c("event_name_1", "event_name_2", "event_type_1", "event_type_2"), ~replace(., is.na(.), "None"))), select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2")) %>%
filter(item_id %in% random_items) %>%
as_tsibble(key = item_id, index = date)
colnames(merged_full_selected) <- gsub(" ", "_", colnames(merged_full_selected))
colnames(merged_full_selected) <- gsub("-", "_", colnames(merged_full_selected))
colnames(merged_full_selected) <- gsub("'", "_", colnames(merged_full_selected))
write.csv(merged_full_selected,"../Data/merged_full_selected.csv", row.names=FALSE)
# Select only dummy variables
dummy_vars <- select(merged_full_selected, starts_with("event_name_1_"), starts_with("event_type_1_"), starts_with("event_name_2_"), starts_with("event_type_2_"))
# Exclude date and item_id columns
dummy_vars <- dummy_vars[, !colnames(dummy_vars) %in% c("date", "item_id")]
colnames(dummy_vars) <- str_trim(colnames(dummy_vars))
dummy_cols <- colnames(dummy_vars)
# print(dummy_cols)
# Escape column names with spaces
dummy_cols <- paste0("`", dummy_cols, "`")
# Create the string format
regressor_string <- paste(dummy_cols, collapse = " + ")
# print(regressor_string)
# Include the string in the formula
sales_formula <- formula(paste("sales ~ snap_TX + ", regressor_string,
"+ season(period = 'week', order = 3, type = 'multiplicative')",
"+ season(period = 'year', order = 10, type = 'multiplicative')"))
# print(regressor_string)
# Fit the model
fit <- merged_full_selected |>
model(prophet = prophet(sales_formula))
#
# # Fit the model
# fit <- merged_full_selected |>
#   model(prophet = prophet(sales ~ snap_TX + event_name_1 + event_type_1 + event_name_2 + event_type_2 +
#                             season(period = "week", order = 3, type = "multiplicative") +
#                             season(period = "year", order = 10, type = "multiplicative")))
#
# Generate the future dataframe
merged_future <- new_data(merged_full_selected,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future <- merged_future |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(calendar %>%
mutate(across(c("event_name_1", "event_name_2", "event_type_1", "event_type_2"), ~replace(., is.na(.), "None"))), select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2"))
colnames(calendar_dummies) <- gsub(" ", "_", colnames(calendar_dummies))
colnames(calendar_dummies) <- gsub("-", "_", colnames(calendar_dummies))
colnames(calendar_dummies) <- gsub("'", "_", colnames(calendar_dummies))
merged_future <- merged_future |> inner_join(calendar_dummies , by = "date")#%>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX)
# glance(fit)
write.csv(merged_future,"../Data/merged_future.csv", row.names=FALSE)
# Forecast
fc <- forecast(fit, new_data =  merged_future)
fc |>
autoplot(merged_full_selected,level=NULL) +
labs(x = "Date", y = "Sales")
#Check metrics with test
sales_test_validation_long <- sales_test_validation %>%
pivot_longer(cols = -id, names_to = "date", values_to = "sales") %>%
mutate(date = as.Date("2011-01-29") + as.integer(str_remove(date, "d_")) - 1) %>%
rename(item_id = id) %>%
mutate(item_id = str_remove(item_id, "_TX_3_validation"))%>%
as_tsibble(key = item_id, index = date)
# Assuming 'fc' is your forecast object
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
mse = mean(mse, na.rm = TRUE),
rmse = mean(rmse, na.rm = TRUE)
)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
mse = mean(mse, na.rm = TRUE),
rmse = mean(rmse, na.rm = TRUE)
)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
mse = mean(MSE, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
dplyr::last_dplyr_warnings()
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) #%>%
View(metrics)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
#Check metrics with test
sales_test_validation_long <- sales_test_validation %>%
pivot_longer(cols = -id, names_to = "date", values_to = "sales") %>%
mutate(date = as.Date("2011-01-29") + as.integer(str_remove(date, "d_")) - 1) %>%
rename(item_id = id) %>%
mutate(item_id = str_remove(item_id, "_TX_3_validation"))%>%
as_tsibble(key = item_id, index = date)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
write.csv(sales_test_validation_long,"../Data/sales_test_validation_long.csv", row.names=FALSE)
metrics <- fc |> accuracy(sales_test_validation_long)
write.csv(metrics,"../Data/metrics_prophet.csv", row.names=FALSE)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
summarise(
mae = mean(mae, na.rm = TRUE),
mse = mean(mse, na.rm = TRUE),
rmse = mean(rmse, na.rm = TRUE)
)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
metrics_by_product <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
View(metrics_by_product)
#Check metrics with test
sales_test_validation_long <- sales_test_validation %>%
pivot_longer(cols = -id, names_to = "date", values_to = "sales") %>%
mutate(date = as.Date("2011-01-29") + as.integer(str_remove(date, "d_")) - 1) %>%
rename(item_id = id) %>%
mutate(item_id = str_remove(item_id, "_TX_3_validation"))%>%
as_tsibble(key = item_id, index = date)
metrics_by_product <- fc %>%
accuracy(sales_test_validation_long) %>%
group_by(item_id) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
metrics <- fc %>%
accuracy(sales_test_validation_long) %>%
summarise(
mae = mean(MAE, na.rm = TRUE),
acf1 = mean(ACF1, na.rm = TRUE),
rmse = mean(RMSE, na.rm = TRUE)
)
write.csv(sales_test_validation_long,"../Data/sales_test_validation_long.csv", row.names=FALSE)
# metrics <- fc |> accuracy(sales_test_validation_long)
write.csv(metrics,"../Data/metrics_prophet.csv", row.names=FALSE)
write.csv(metrics_by_product,"../Data/metrics_by_product_prophet.csv", row.names=FALSE)
merged_full_all <- fastDummies::dummy_cols(merged_data %>%
mutate(across(c("event_name_1", "event_name_2", "event_type_1", "event_type_2"), ~replace(., is.na(.), "None"))), select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2")) %>%
as_tsibble(key = item_id, index = date)
# filter(item_id %in% random_items) %>%
merged_full_all <- fastDummies::dummy_cols(merged_data %>%
mutate(across(c("event_name_1", "event_name_2", "event_type_1", "event_type_2"), ~replace(., is.na(.), "None"))), select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2")) %>%
as_tsibble(key = item_id, index = date)
# filter(item_id %in% random_items) %>%
colnames(merged_full_all) <- gsub(" ", "_", colnames(merged_full_all))
colnames(merged_full_all) <- gsub("-", "_", colnames(merged_full_all))
colnames(merged_full_all) <- gsub("'", "_", colnames(merged_full_all))
# write.csv(merged_full_all,"../Data/merged_full_all.csv", row.names=FALSE)
# Select only dummy variables
dummy_vars <- select(merged_full_all, starts_with("event_name_1_"), starts_with("event_type_1_"), starts_with("event_name_2_"), starts_with("event_type_2_"))
# Exclude date and item_id columns
dummy_vars <- dummy_vars[, !colnames(dummy_vars) %in% c("date", "item_id")]
colnames(dummy_vars) <- str_trim(colnames(dummy_vars))
dummy_cols <- colnames(dummy_vars)
# print(dummy_cols)
# Escape column names with spaces
dummy_cols <- paste0("`", dummy_cols, "`")
# Create the string format
regressor_string <- paste(dummy_cols, collapse = " + ")
# print(regressor_string)
# Include the string in the formula
sales_formula <- formula(paste("sales ~ snap_TX + ", regressor_string,
"+ season(period = 'week', order = 3, type = 'multiplicative')",
"+ season(period = 'year', order = 10, type = 'multiplicative')"))
fit <- merged_full_all |>
model(prophet = prophet(sales_formula))
View(fit)
# Generate the future dataframe
merged_future_all <- new_data(merged_full_all,28)
last_sell_prices <- merged_data %>%
group_by(item_id) %>%
summarise(sell_price = last(sell_price))
# Merge the last known 'sell_price' into merged_future
merged_future_all <- merged_future_all |>
left_join(last_sell_prices, by = "item_id") |>
ungroup()  # Remove grouping
# Convert categorical variables to dummy variables
calendar_dummies <- fastDummies::dummy_cols(calendar %>%
mutate(across(c("event_name_1", "event_name_2", "event_type_1", "event_type_2"), ~replace(., is.na(.), "None"))), select_columns = c("event_name_1", "event_type_1", "event_name_2", "event_type_2"))
colnames(calendar_dummies) <- gsub(" ", "_", colnames(calendar_dummies))
colnames(calendar_dummies) <- gsub("-", "_", colnames(calendar_dummies))
colnames(calendar_dummies) <- gsub("'", "_", colnames(calendar_dummies))
merged_future_all <- merged_future_all |> inner_join(calendar_dummies , by = "date")#%>% select(date,event_name_1,event_type_1,event_name_2,event_type_2,snap_TX)
# Forecast
fc <- forecast(fit, new_data =  merged_future_all)
